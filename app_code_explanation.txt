STUDENT FEEDBACK APPLICATION - COMPLETE CODE EXPLANATION
========================================================

This document explains every section, function, and feature in the app.py file.

TABLE OF CONTENTS:
1. Imports and Dependencies
2. Environment Configuration
3. AWS Services Setup
4. Database Table Management
5. Authentication System
6. Utility Functions
7. Route Handlers
8. Data Processing Functions
9. Application Startup

========================================================
1. IMPORTS AND DEPENDENCIES
========================================================

from flask import Flask, render_template, request, redirect, url_for, flash, session
- Flask: Main web framework for creating the application
- render_template: Renders HTML templates with dynamic data
- request: Handles HTTP requests (GET, POST data)
- redirect: Redirects users to different pages
- url_for: Generates URLs for routes
- flash: Shows temporary messages to users
- session: Manages user login sessions

import boto3, botocore
- boto3: AWS SDK for Python to interact with AWS services
- botocore: Low-level AWS service access (for error handling)

import os, csv, io, logging, hashlib
- os: Operating system interface for environment variables
- csv: Create and manipulate CSV files
- io: Handle input/output operations (file-like objects)
- logging: Application logging and debugging
- hashlib: Hash functions (not currently used but imported)

from datetime import datetime
- datetime: Handle date and time operations

from functools import wraps
- wraps: Decorator utility for preserving function metadata

from dotenv import load_dotenv
- load_dotenv: Load environment variables from .env file

========================================================
2. ENVIRONMENT CONFIGURATION
========================================================

load_dotenv()
- Loads environment variables from .env file into the application

app = Flask(__name__)
- Creates the main Flask application instance

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
- Sets up logging system to track application events and errors

app.secret_key = os.getenv('FLASK_SECRET_KEY', 'fallback_secret_key_change_in_production')
- Sets secret key for session management and security

AWS Configuration Variables:
AWS_REGION = os.getenv('AWS_REGION')
S3_BUCKET = os.getenv('S3_BUCKET')
DYNAMODB_TABLE = os.getenv('DYNAMODB_TABLE')
ADMIN_TABLE = os.getenv('ADMIN_TABLE')
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')

Environment Variable Validation:
- Checks if all required AWS credentials and configuration are present
- Raises error if any required variables are missing
- Ensures application won't start with incomplete configuration

========================================================
3. AWS SERVICES SETUP
========================================================

S3 Client Setup:
s3_client = boto3.client(
    's3',
    region_name=AWS_REGION,
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY
)
- Creates S3 client for file storage operations
- Used to store CSV files containing feedback data

DynamoDB Resource Setup:
dynamodb = boto3.resource(
    'dynamodb',
    region_name=AWS_REGION,
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY
)
- Creates DynamoDB resource for database operations
- Used to store feedback metadata and admin credentials

========================================================
4. DATABASE TABLE MANAGEMENT
========================================================

verify_dynamodb_table() Function:
- Checks if the main feedback table exists in DynamoDB
- Returns table object if exists, creates it if missing
- Handles connection errors gracefully

create_dynamodb_table() Function:
- Creates the main feedback table with proper schema
- Sets up partition key 'Id' as string type
- Uses pay-per-request billing mode for cost efficiency
- Waits for table creation to complete

verify_admin_table() Function:
- Similar to verify_dynamodb_table but for admin credentials
- Ensures admin authentication table exists

create_admin_table() Function:
- Creates admin table with 'email' as partition key
- Stores admin login credentials securely
- Uses same billing and configuration as main table

Table Initialization:
table = verify_dynamodb_table()
admin_table = verify_admin_table()
- Initializes both tables on application startup
- Ensures database is ready before handling requests

========================================================
5. AUTHENTICATION SYSTEM
========================================================

login_required Decorator:
@login_required
def protected_route():
- Decorator function that protects admin routes
- Checks if user is logged in via session
- Redirects to login page if not authenticated
- Uses @wraps to preserve original function metadata

authenticate_admin() Function:
- Validates admin email and password against DynamoDB
- Tries multiple approaches to find admin record:
  1. Direct lookup by email key
  2. Table scan if key structure differs
- Handles various field name variations (email/Email/EMAIL)
- Returns True if credentials match, False otherwise
- Includes comprehensive error handling and logging

Session Management:
- Uses Flask sessions to track login state
- Stores admin email in session after successful login
- Provides secure logout functionality

========================================================
6. UTILITY FUNCTIONS
========================================================

generate_csv_content() Function:
def generate_csv_content(name, email, feedback, timestamp):
- Creates CSV content from feedback form data
- Formats data with proper headers
- Returns CSV string ready for file storage
- Used when storing feedback submissions

Purpose: Converts form data into standardized CSV format for storage

========================================================
7. ROUTE HANDLERS
========================================================

HOME AND BASIC ROUTES:

@app.route('/')
def home():
- Main landing page of the application
- Renders home.html template
- Entry point for users

@app.route('/form')
def feedback_form():
- Displays feedback submission form
- Renders index.html template
- Where users submit their feedback

@app.route('/confirmation')
def confirmation():
- Shows success message after feedback submission
- Renders confirmation.html template
- Provides user feedback that submission was successful

ADMIN AUTHENTICATION ROUTES:

@app.route('/admin')
def admin_login():
- Admin login page
- Redirects to dashboard if already logged in
- Renders admin_login.html template

@app.route('/admin/login', methods=['POST'])
def admin_login_post():
- Handles admin login form submission
- Validates email and password
- Creates session on successful authentication
- Redirects to dashboard or back to login with error

@app.route('/admin/logout')
def admin_logout():
- Logs out admin user
- Clears session data
- Redirects to home page with success message

PROTECTED ADMIN ROUTES:

@app.route('/admin/dashboard')
@login_required
def admin_dashboard():
- Main admin dashboard with visualizations
- Protected by login_required decorator
- Renders enhanced admin_dashboard.html with charts
- Shows real-time feedback statistics and analytics

@app.route('/admin/reports')
@login_required
def admin_reports():
- Legacy reports page
- Shows dummy report data for demonstration
- Protected admin route

@app.route('/admin/feedback-view')
@login_required
def feedback_view_page():
- Legacy feedback data viewer
- Renders feedback_data.html template
- Provides raw JSON data view and CSV download

FEEDBACK SUBMISSION ROUTE:

@app.route('/submit', methods=['POST'])
def submit_feedback():
- Handles feedback form submissions
- Validates required fields (name, email, feedback)
- Sanitizes input data
- Creates timestamp for unique identification
- Generates CSV filename
- Uploads CSV to S3 bucket
- Stores metadata in DynamoDB
- Comprehensive error handling for AWS operations
- Redirects to confirmation page on success

Process Flow:
1. Validate form data
2. Create timestamp and filename
3. Generate CSV content
4. Upload to S3
5. Store metadata in DynamoDB
6. Handle errors gracefully
7. Redirect to confirmation

========================================================
8. DATA PROCESSING FUNCTIONS (NEW DASHBOARD FEATURES)
========================================================

@app.route('/admin/feedback-data')
@login_required
def feedback_data():
- Fetches raw feedback data from FeedbackSummaryTable
- Returns JSON response with all feedback items
- Used by legacy data viewer and new dashboard
- Includes error handling for database operations

@app.route('/admin/dashboard-stats')
@login_required
def dashboard_stats():
- NEW FEATURE: Processes feedback data for dashboard visualizations
- Scans FeedbackSummaryTable for all feedback items
- Processes and aggregates data for charts:

Data Processing Steps:
1. Initialize counters for different metrics
2. Loop through each feedback item
3. Process sentiment data:
   - Counts POSITIVE, NEGATIVE, NEUTRAL, MIXED sentiments
   - Aggregates sentiment counts across all feedback
4. Process faculty mentions:
   - Counts mentions of each faculty member
   - Creates ranking of most mentioned faculty
5. Process theme tags:
   - Counts frequency of different themes
   - Identifies popular discussion topics
6. Process monthly trends:
   - Extracts month from processed_at timestamp
   - Aggregates feedback volume by month
7. Calculate totals and statistics

Returns JSON with:
- total_feedback: Number of feedback items
- total_comments: Sum of all comments
- sentiment_distribution: Breakdown by sentiment type
- top_faculty: Most mentioned faculty (top 10)
- top_themes: Most frequent themes (top 10)
- monthly_trends: Feedback volume over time

@app.route('/admin/filtered-data')
@login_required
def filtered_data():
- NEW FEATURE: Filters feedback data based on query parameters
- Supports multiple filter types:
  - sentiment: Filter by POSITIVE/NEGATIVE/NEUTRAL/MIXED
  - faculty: Filter by specific faculty member
  - theme: Filter by theme tags
  - start_date/end_date: Filter by date range

Filter Logic:
1. Get filter parameters from URL query string
2. Scan all feedback data from DynamoDB
3. Apply filters sequentially:
   - Sentiment filter: Check if sentiment exists in item
   - Faculty filter: Check if faculty mentioned in item
   - Theme filter: Check if theme exists in item
   - Date filter: Compare item date with range
4. Return filtered results with count

@app.route('/admin/export-filtered-data')
@login_required
def export_filtered_data():
- NEW FEATURE: Exports filtered data as downloadable CSV
- Uses same filtering logic as filtered_data()
- Formats data for CSV export:
  - File Name, Processed At, Total Comments
  - Dominant Sentiment (calculated from sentiment counts)
  - Faculty Mentions (formatted as key:value pairs)
  - Theme Tags (formatted as key:value pairs)
  - Top Key Phrases (joined with semicolons)

CSV Generation Process:
1. Get filtered data using same logic
2. Create CSV headers
3. Process each item:
   - Determine dominant sentiment
   - Format complex fields as readable strings
   - Create CSV row
4. Generate downloadable response with proper headers

========================================================
9. APPLICATION STARTUP
========================================================

if __name__ == "__main__":
    app.run(debug=True)

- Starts the Flask development server when script is run directly
- Enables debug mode for development (shows detailed errors)
- Listens on default port 5000
- Only runs if script is executed directly (not imported)

========================================================
KEY FEATURES IMPLEMENTED
========================================================

1. FEEDBACK COLLECTION SYSTEM:
   - Web form for user feedback submission
   - Automatic CSV generation and S3 storage
   - Metadata storage in DynamoDB
   - Confirmation system for users

2. ADMIN AUTHENTICATION:
   - Secure login system with session management
   - Protected admin routes
   - DynamoDB-based credential storage
   - Logout functionality

3. DATA VISUALIZATION DASHBOARD:
   - Real-time statistics display
   - Interactive charts (pie, bar, line graphs)
   - Sentiment analysis visualization
   - Faculty mention tracking
   - Theme analysis
   - Monthly trend analysis

4. FILTERING AND EXPORT SYSTEM:
   - Multi-criteria filtering (sentiment, faculty, theme, date)
   - Real-time filter application
   - CSV export of filtered data
   - Raw JSON data viewing

5. ERROR HANDLING AND LOGGING:
   - Comprehensive error handling for AWS operations
   - Detailed logging for debugging
   - User-friendly error messages
   - Graceful failure handling

6. RESPONSIVE DESIGN:
   - Mobile-friendly interface
   - Chart responsiveness
   - Adaptive layouts
   - Cross-browser compatibility

========================================================
SECURITY FEATURES
========================================================

1. Environment Variable Protection:
   - AWS credentials stored in .env file
   - No hardcoded secrets in code
   - Environment validation on startup

2. Session Security:
   - Flask secret key for session encryption
   - Session-based authentication
   - Automatic session cleanup on logout

3. Input Validation:
   - Form data sanitization
   - Required field validation
   - SQL injection prevention (using DynamoDB)

4. Access Control:
   - Login required for admin functions
   - Route-level protection
   - Session verification

========================================================
AWS INTEGRATION
========================================================

1. S3 INTEGRATION:
   - Automatic file upload
   - Proper content type setting
   - Error handling for upload failures
   - Unique filename generation

2. DYNAMODB INTEGRATION:
   - Automatic table creation
   - Proper schema design
   - Error handling for database operations
   - Efficient querying and scanning

3. BOTO3 USAGE:
   - Proper client/resource initialization
   - Credential management
   - Region configuration
   - Exception handling

========================================================
PERFORMANCE CONSIDERATIONS
========================================================

1. DATABASE OPERATIONS:
   - Pay-per-request billing for cost efficiency
   - Efficient table scanning
   - Proper error handling to prevent crashes

2. MEMORY MANAGEMENT:
   - Streaming file operations
   - Efficient data processing
   - Proper resource cleanup

3. CACHING:
   - Session-based authentication caching
   - Static file serving optimization

========================================================
MAINTENANCE AND MONITORING
========================================================

1. LOGGING SYSTEM:
   - INFO level logging for normal operations
   - ERROR level logging for failures
   - Detailed error messages for debugging

2. ERROR RECOVERY:
   - Graceful handling of AWS service failures
   - User-friendly error messages
   - Automatic retry mechanisms where appropriate

3. CONFIGURATION MANAGEMENT:
   - Environment-based configuration
   - Easy deployment across environments
   - Centralized settings management

This completes the comprehensive explanation of every aspect of the Student Feedback Application code.
